{{- if .GenerateClient }}
	{{ reserveImport "context" }}
	{{ reserveImport "fmt" }}
	{{ reserveImport "log" }}


	{{ reserveImport "github.com/borderlesshq/graphrpc" }}
    {{ reserveImport "github.com/borderlesshq/axon/v2" }}
    {{ reserveImport "github.com/borderlesshq/graphrpc/client" }}

	type ServiceClient struct {
    		conn *client.Client
    }

        {{- if .ClientInterfaceName }}
    	func NewClient(conn axon.EventStore, options ...graphrpc.ClientOption) ({{ .ClientInterfaceName }}, error) {
        {{- else }}
        func NewClient(conn axon.EventStore, options ...graphrpc.ClientOption) (*ServiceClient, error) {
        {{- end }}

        	clientConn, err := graphrpc.NewClient(conn, options...)
            if err != nil {
                return nil, err
            }
             return &ServiceClient{conn: clientConn}, nil
         }


         {{- if .ClientInterfaceName }}
        func NewServiceClient(conn axon.EventStore, options ...graphrpc.ClientOption) {{ .ClientInterfaceName }} {
        {{- else }}
        func NewServiceClient(conn axon.EventStore, options ...graphrpc.ClientOption) *ServiceClient {
        {{- end }}

            clientConn, err := graphrpc.NewClient(conn, options...)
            if err != nil {
                 log.Fatal(err)
            }

            return &ServiceClient{conn: clientConn}
        }
{{- end }}

{{/* Greek character used to prevent name conflicts: */}}
{{/* > prefix with Ξ */}}
{{/* > ctх (х in cyrillic alphabet) because it is user facing */}}

{{- range $_, $element := .Types }}
    // {{ .Path.Kind }}: {{ .Path.String }}
	type {{ .Name }} {{ .Type | ref }}

    {{- if .IsInputMap }}
        func New{{ $element.Name }}({{- range $f := .MapReq }}{{$f.Name}} {{$f.Type|ref}},{{- end }}) {{ $element.Name }} {
            return map[string]interface{}{
            {{- range $f := .MapReq }}
                "{{$f.Name}}": {{$f.Name}},
            {{- end }}
            }
        }

        {{- range $f := .MapOpt }}
            func (t {{ $element.Name }}) With{{$f.Name|go}}(v {{$f.Type|ref}}) {{ $element.Name }} {
                t["{{$f.Name}}"] = v
                return t
            }
        {{- end }}
    {{- end }}

    {{- if .UnmarshalTypes }}
    func (t *{{ .Name }}) UnmarshalJSON(data []byte) error {
        type ΞAlias {{ .Name }}
        var r ΞAlias

        err := json.Unmarshal(data, &r)
        if err != nil {
            return err
        }

        *t = {{ .Name }}(r)

        switch r.Typename {
        {{- range $typename, $target := .UnmarshalTypes }}
            case "{{ $typename }}":
                var a {{ $target.Type | ref }}
                err = json.Unmarshal(data, &a)
                if err != nil {
                    return err
                }

                t.{{ $target.Name }} = &a
        {{- end }}
        }

        return nil
    }
    {{- end }}

    {{- if .Consts }}
        const (
        {{- range $const := .Consts }}
            {{$const.Name}} {{$const.Type|ref}} = {{$const.Val.ExactString}}
        {{- end }}
        )
    {{- end }}
{{- end }}

// Pointer helpers
{{- range $_, $element := .PtrTypes }}
    func {{ $element.Name|go }}Ptr(v {{ $element.Type|ref }}) *{{ $element.Type|ref }} {
        return &v
    }
{{- end }}

{{- range $op := .Operations }}
	const {{ $op.Name|go }}Document = `{{ $op.Operation }}`

	{{- if $.GenerateClient }}
        {{- if eq $op.OperationType "subscription" }}
            type Message{{ $op.Name|go }} struct {
                Data       *{{ $op.ResponseType | ref }}
                Error      error
                Extensions client.RawExtensions
            }

            func (Ξc *ServiceClient) {{ $op.Name|go }} (ctх context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}, headers client.Header) (<-chan Message{{ $op.Name|go }}, func()) {
                vars := map[string]interface{}{
                {{- range $args := .VariableDefinitions}}
                    "{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
                {{- end }}
                }

                { {{/* New block to prevent var names conflicts */}}
                    res := Ξc.conn.Subscription(ctх, "{{ $op.Name }}", {{ $op.Name|go }}Document, vars, headers)

                    ch := make(chan Message{{ $op.Name|go }})

                    go func() {
                        for {
                            opres := res.Get()

                            var msg Message{{ $op.Name|go }}
                            if len(opres.Errors) > 0 {
                                msg.Error = opres.Errors
                            }

                            err := opres.UnmarshalData(&msg.Data)
                            if err != nil && msg.Error == nil {
                                msg.Error = err
                            }

                            msg.Extensions = opres.Extensions

                            ch <- msg
                        }

                        if err := res.Err(); err != nil {
                            ch <- Message{{ $op.Name|go }} {
                                Error: err,
                            }
                        }
                        close(ch)
                    }()

                    return ch, res.Close
                }
            }
        {{- else}}
            func (Ξc *ServiceClient) {{ $op.Name|go }} (ctх context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}, headers client.Header) (*{{ $op.ResponseType | ref }},  error) {
                vars := map[string]interface{}{
                {{- range $args := .VariableDefinitions}}
                    "{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
                {{- end }}
                }

                { {{/* New block to prevent var names conflicts */}}
                    var data {{ $op.ResponseType | ref }}
                    res, err := Ξc.conn.{{ $op.OperationType|ucFirst }}(ctх, "{{ $op.Name }}", {{ $op.Name|go }}Document, vars, &data, headers)
                    if err != nil {
                        return nil, err
                    }


                    if res.Errors != nil && len(res.Errors) > 0 {
                    	return nil, res.Errors
                    }

                    return &data, nil
                }
            }
        {{- end}}
	{{- end}}
{{- end}}


{{ reserveImport "os" }}
{{ reserveImport "github.com/borderlesshq/graphrpc/libs/99designs/gqlgen/graphql/handler" }}
{{ reserveImport "fmt" }}
{{ reserveImport "github.com/borderlesshq/axon/v2" }}
{{ reserveImport "github.com/borderlesshq/axon/v2/options" }}
{{ reserveImport "github.com/borderlesshq/axon/v2/systems/jetstream" }}
{{ reserveImport "github.com/borderlesshq/graphrpc" }}
{{ reserveImport "github.com/borderlesshq/graphrpc/server" }}
{{ reserveImport "github.com/sirupsen/logrus" }}


const defaultPort = "8080"

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = defaultPort
	}

    var eventStore axon.EventStore
    var err error

    if eventStore, err = jetstream.Init(options.Options{
    	ServiceName:         "#_MOD_PACKAGE_NAME",
    	Address:             "0.0.0.0:4222",
    	AuthenticationToken: "",
    }); err != nil {
    	logrus.Fatalf("failed to initialize nats/jetstream connection. error: %s", err)
    }


    address := fmt.Sprintf("0.0.0.0:%s", port)
    if err := graphrpc.NewServer(
    	eventStore,
    	handler.NewDefaultServer(graph.NewExecutableSchema(graph.Config{Resolvers: &graph.Resolver{}})),
    	server.SetGraphHTTPServerAddress(address),
    	server.SetGraphQLPath("/graphql"),
    	server.ApplyMsgpackEncoder(),
    ).Serve(); err != nil {
    	logrus.Fatalf("could not start server on %s. Got error: %s", address, err)
    }
}
